// Code generated by go-swagger; DO NOT EDIT.

package backup_restore_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup restore service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new backup restore service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new backup restore service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for backup restore service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BackupRestoreServiceDeleteBackup(params *BackupRestoreServiceDeleteBackupParams, opts ...ClientOption) (*BackupRestoreServiceDeleteBackupOK, error)

	BackupRestoreServiceGetBackup(params *BackupRestoreServiceGetBackupParams, opts ...ClientOption) (*BackupRestoreServiceGetBackupOK, error)

	BackupRestoreServiceListBackups(params *BackupRestoreServiceListBackupsParams, opts ...ClientOption) (*BackupRestoreServiceListBackupsOK, error)

	BackupRestoreServiceRestore(params *BackupRestoreServiceRestoreParams, opts ...ClientOption) (*BackupRestoreServiceRestoreOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BackupRestoreServiceDeleteBackup deletes a specific backup
*/
func (a *Client) BackupRestoreServiceDeleteBackup(params *BackupRestoreServiceDeleteBackupParams, opts ...ClientOption) (*BackupRestoreServiceDeleteBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupRestoreServiceDeleteBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BackupRestoreService_DeleteBackup",
		Method:             "DELETE",
		PathPattern:        "/v1beta1/backups/{backupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupRestoreServiceDeleteBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupRestoreServiceDeleteBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupRestoreServiceDeleteBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BackupRestoreServiceGetBackup retrieves details of a specific backup
*/
func (a *Client) BackupRestoreServiceGetBackup(params *BackupRestoreServiceGetBackupParams, opts ...ClientOption) (*BackupRestoreServiceGetBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupRestoreServiceGetBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BackupRestoreService_GetBackup",
		Method:             "GET",
		PathPattern:        "/v1beta1/backups/{backupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupRestoreServiceGetBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupRestoreServiceGetBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupRestoreServiceGetBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BackupRestoreServiceListBackups provides a list of backups
*/
func (a *Client) BackupRestoreServiceListBackups(params *BackupRestoreServiceListBackupsParams, opts ...ClientOption) (*BackupRestoreServiceListBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupRestoreServiceListBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BackupRestoreService_ListBackups",
		Method:             "GET",
		PathPattern:        "/v1beta1/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupRestoreServiceListBackupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupRestoreServiceListBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupRestoreServiceListBackupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BackupRestoreServiceRestore backup restore service restore API
*/
func (a *Client) BackupRestoreServiceRestore(params *BackupRestoreServiceRestoreParams, opts ...ClientOption) (*BackupRestoreServiceRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupRestoreServiceRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BackupRestoreService_Restore",
		Method:             "POST",
		PathPattern:        "/v1beta1/clusters:restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupRestoreServiceRestoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupRestoreServiceRestoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupRestoreServiceRestoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
