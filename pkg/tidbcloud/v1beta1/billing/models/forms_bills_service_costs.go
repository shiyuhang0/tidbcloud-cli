// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FormsBillsServiceCosts forms bills service costs
//
// swagger:model forms.BillsServiceCosts
type FormsBillsServiceCosts struct {

	// The total credits held by the organization in this bill. The value of this field is expressed in cents (100ths of one US Dollar).
	// Example: 0.00
	Credits string `json:"credits,omitempty"`

	// Total amount of discounts applied to this bill. The value of this field is expressed in cents (100ths of one US Dollar).
	// Example: 0.00
	Discounts string `json:"discounts,omitempty"`

	// The sum of services that the specified organization consumed in the period during this bill period. The value of this field is expressed in cents (100ths of one US Dollar).
	// Example: 0.00
	RunningTotal string `json:"runningTotal,omitempty"`

	// service costs
	ServiceCosts []*FormsBillsServiceCosts `json:"serviceCosts"`

	// The name of services provided by TiDB Cloud.
	// Example: TiDB Dedicated
	ServiceName string `json:"serviceName,omitempty"`

	// The total amount that the specified organization should pay toward this bill. The value of this field is expressed in cents (100ths of one US Dollar).
	// `total_cost` = `running_total` - `discounts` - `credits`.
	// Example: 0.00
	TotalCost string `json:"totalCost,omitempty"`
}

// Validate validates this forms bills service costs
func (m *FormsBillsServiceCosts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceCosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormsBillsServiceCosts) validateServiceCosts(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceCosts) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceCosts); i++ {
		if swag.IsZero(m.ServiceCosts[i]) { // not required
			continue
		}

		if m.ServiceCosts[i] != nil {
			if err := m.ServiceCosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceCosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceCosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this forms bills service costs based on the context it is used
func (m *FormsBillsServiceCosts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateServiceCosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormsBillsServiceCosts) contextValidateServiceCosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServiceCosts); i++ {

		if m.ServiceCosts[i] != nil {

			if swag.IsZero(m.ServiceCosts[i]) { // not required
				return nil
			}

			if err := m.ServiceCosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceCosts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceCosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FormsBillsServiceCosts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FormsBillsServiceCosts) UnmarshalBinary(b []byte) error {
	var res FormsBillsServiceCosts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
