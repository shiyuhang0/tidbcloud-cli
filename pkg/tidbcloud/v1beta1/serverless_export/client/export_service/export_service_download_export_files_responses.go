// Code generated by go-swagger; DO NOT EDIT.

package export_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless_export/models"
)

// ExportServiceDownloadExportFilesReader is a Reader for the ExportServiceDownloadExportFiles structure.
type ExportServiceDownloadExportFilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportServiceDownloadExportFilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportServiceDownloadExportFilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewExportServiceDownloadExportFilesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExportServiceDownloadExportFilesOK creates a ExportServiceDownloadExportFilesOK with default headers values
func NewExportServiceDownloadExportFilesOK() *ExportServiceDownloadExportFilesOK {
	return &ExportServiceDownloadExportFilesOK{}
}

/*
ExportServiceDownloadExportFilesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ExportServiceDownloadExportFilesOK struct {
	Payload *models.V1beta1DownloadExportFilesResponse
}

// IsSuccess returns true when this export service download export files o k response has a 2xx status code
func (o *ExportServiceDownloadExportFilesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this export service download export files o k response has a 3xx status code
func (o *ExportServiceDownloadExportFilesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export service download export files o k response has a 4xx status code
func (o *ExportServiceDownloadExportFilesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this export service download export files o k response has a 5xx status code
func (o *ExportServiceDownloadExportFilesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this export service download export files o k response a status code equal to that given
func (o *ExportServiceDownloadExportFilesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the export service download export files o k response
func (o *ExportServiceDownloadExportFilesOK) Code() int {
	return 200
}

func (o *ExportServiceDownloadExportFilesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/exports/{exportId}/files:download][%d] exportServiceDownloadExportFilesOK %s", 200, payload)
}

func (o *ExportServiceDownloadExportFilesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/exports/{exportId}/files:download][%d] exportServiceDownloadExportFilesOK %s", 200, payload)
}

func (o *ExportServiceDownloadExportFilesOK) GetPayload() *models.V1beta1DownloadExportFilesResponse {
	return o.Payload
}

func (o *ExportServiceDownloadExportFilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1beta1DownloadExportFilesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportServiceDownloadExportFilesDefault creates a ExportServiceDownloadExportFilesDefault with default headers values
func NewExportServiceDownloadExportFilesDefault(code int) *ExportServiceDownloadExportFilesDefault {
	return &ExportServiceDownloadExportFilesDefault{
		_statusCode: code,
	}
}

/*
ExportServiceDownloadExportFilesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ExportServiceDownloadExportFilesDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this export service download export files default response has a 2xx status code
func (o *ExportServiceDownloadExportFilesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this export service download export files default response has a 3xx status code
func (o *ExportServiceDownloadExportFilesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this export service download export files default response has a 4xx status code
func (o *ExportServiceDownloadExportFilesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this export service download export files default response has a 5xx status code
func (o *ExportServiceDownloadExportFilesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this export service download export files default response a status code equal to that given
func (o *ExportServiceDownloadExportFilesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the export service download export files default response
func (o *ExportServiceDownloadExportFilesDefault) Code() int {
	return o._statusCode
}

func (o *ExportServiceDownloadExportFilesDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/exports/{exportId}/files:download][%d] ExportService_DownloadExportFiles default %s", o._statusCode, payload)
}

func (o *ExportServiceDownloadExportFilesDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/exports/{exportId}/files:download][%d] ExportService_DownloadExportFiles default %s", o._statusCode, payload)
}

func (o *ExportServiceDownloadExportFilesDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *ExportServiceDownloadExportFilesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ExportServiceDownloadExportFilesBody export service download export files body
swagger:model ExportServiceDownloadExportFilesBody
*/
type ExportServiceDownloadExportFilesBody struct {

	// Required. The name of the files to be downloaded.
	// Required: true
	FileNames []string `json:"fileNames"`
}

// Validate validates this export service download export files body
func (o *ExportServiceDownloadExportFilesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFileNames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExportServiceDownloadExportFilesBody) validateFileNames(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"fileNames", "body", o.FileNames); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this export service download export files body based on context it is used
func (o *ExportServiceDownloadExportFilesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExportServiceDownloadExportFilesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExportServiceDownloadExportFilesBody) UnmarshalBinary(b []byte) error {
	var res ExportServiceDownloadExportFilesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
