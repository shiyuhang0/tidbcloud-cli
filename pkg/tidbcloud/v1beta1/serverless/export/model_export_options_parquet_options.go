/*
TiDB Cloud Serverless Export Open API

TiDB Cloud Serverless Export Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportOptionsParquetOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportOptionsParquetOptions{}

// ExportOptionsParquetOptions struct for ExportOptionsParquetOptions
type ExportOptionsParquetOptions struct {
	// Optional. The compression of the parquet. Default is ZSTD.
	Compression *ExportParquetCompressionTypeEnum `json:"compression,omitempty"`
}

// NewExportOptionsParquetOptions instantiates a new ExportOptionsParquetOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportOptionsParquetOptions() *ExportOptionsParquetOptions {
	this := ExportOptionsParquetOptions{}
	return &this
}

// NewExportOptionsParquetOptionsWithDefaults instantiates a new ExportOptionsParquetOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportOptionsParquetOptionsWithDefaults() *ExportOptionsParquetOptions {
	this := ExportOptionsParquetOptions{}
	return &this
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *ExportOptionsParquetOptions) GetCompression() ExportParquetCompressionTypeEnum {
	if o == nil || IsNil(o.Compression) {
		var ret ExportParquetCompressionTypeEnum
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportOptionsParquetOptions) GetCompressionOk() (*ExportParquetCompressionTypeEnum, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *ExportOptionsParquetOptions) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given ExportParquetCompressionTypeEnum and assigns it to the Compression field.
func (o *ExportOptionsParquetOptions) SetCompression(v ExportParquetCompressionTypeEnum) {
	o.Compression = &v
}

func (o ExportOptionsParquetOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportOptionsParquetOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	return toSerialize, nil
}

type NullableExportOptionsParquetOptions struct {
	value *ExportOptionsParquetOptions
	isSet bool
}

func (v NullableExportOptionsParquetOptions) Get() *ExportOptionsParquetOptions {
	return v.value
}

func (v *NullableExportOptionsParquetOptions) Set(val *ExportOptionsParquetOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableExportOptionsParquetOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableExportOptionsParquetOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportOptionsParquetOptions(val *ExportOptionsParquetOptions) *NullableExportOptionsParquetOptions {
	return &NullableExportOptionsParquetOptions{value: val, isSet: true}
}

func (v NullableExportOptionsParquetOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportOptionsParquetOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
