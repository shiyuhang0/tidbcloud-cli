// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenapiBranchState openapi branch state
//
// swagger:model openapiBranchState
type OpenapiBranchState string

func NewOpenapiBranchState(value OpenapiBranchState) *OpenapiBranchState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OpenapiBranchState.
func (m OpenapiBranchState) Pointer() *OpenapiBranchState {
	return &m
}

const (

	// OpenapiBranchStateCREATING captures enum value "CREATING"
	OpenapiBranchStateCREATING OpenapiBranchState = "CREATING"

	// OpenapiBranchStateREADY captures enum value "READY"
	OpenapiBranchStateREADY OpenapiBranchState = "READY"

	// OpenapiBranchStateDELETING captures enum value "DELETING"
	OpenapiBranchStateDELETING OpenapiBranchState = "DELETING"

	// OpenapiBranchStateMAINTENANCE captures enum value "MAINTENANCE"
	OpenapiBranchStateMAINTENANCE OpenapiBranchState = "MAINTENANCE"
)

// for schema
var openapiBranchStateEnum []interface{}

func init() {
	var res []OpenapiBranchState
	if err := json.Unmarshal([]byte(`["CREATING","READY","DELETING","MAINTENANCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiBranchStateEnum = append(openapiBranchStateEnum, v)
	}
}

func (m OpenapiBranchState) validateOpenapiBranchStateEnum(path, location string, value OpenapiBranchState) error {
	if err := validate.EnumCase(path, location, value, openapiBranchStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openapi branch state
func (m OpenapiBranchState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenapiBranchStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openapi branch state based on context it is used
func (m OpenapiBranchState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
