// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiBasicBranch BranchItem
//
// BranchItem is the information of branch.
//
// swagger:model openapiBasicBranch
type OpenapiBasicBranch struct {

	// The ID of the cluster.
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// The creation timestamp of the branch.
	// Required: true
	// Format: date-time
	CreateTime *strfmt.DateTime `json:"create_time"`

	// The delete timestamp of the branch.
	// Required: true
	// Format: date-time
	DeleteTime *strfmt.DateTime `json:"delete_time"`

	// The display name of the branch.
	// Required: true
	DisplayName *string `json:"display_name"`

	// The ID of the branch.
	// Required: true
	ID *string `json:"id"`

	// The name of the branch.
	// Required: true
	Name *string `json:"name"`

	// The ID of the parent branch.
	// Required: true
	ParentID *string `json:"parent_id"`

	// The status of the branch.
	// Required: true
	State *OpenapiBranchState `json:"state"`

	// The update timestamp of the branch.
	// Required: true
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"update_time"`
}

// Validate validates this openapi basic branch
func (m *OpenapiBasicBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiBasicBranch) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBasicBranch) validateCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("create_time", "body", m.CreateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBasicBranch) validateDeleteTime(formats strfmt.Registry) error {

	if err := validate.Required("delete_time", "body", m.DeleteTime); err != nil {
		return err
	}

	if err := validate.FormatOf("delete_time", "body", "date-time", m.DeleteTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBasicBranch) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBasicBranch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBasicBranch) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBasicBranch) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parent_id", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBasicBranch) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiBasicBranch) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("update_time", "body", m.UpdateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openapi basic branch based on the context it is used
func (m *OpenapiBasicBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiBasicBranch) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiBasicBranch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiBasicBranch) UnmarshalBinary(b []byte) error {
	var res OpenapiBasicBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
