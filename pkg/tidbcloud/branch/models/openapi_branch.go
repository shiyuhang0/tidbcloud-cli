// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiBranch BranchItem
//
// BranchItem is the information of branch.
//
// swagger:model openapiBranch
type OpenapiBranch struct {

	// The annotations of the branch.
	// Required: true
	Annotations map[string]string `json:"annotations"`

	// The ID of the cluster.
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// The creation timestamp of the branch.
	// Required: true
	// Format: date-time
	CreateTime *strfmt.DateTime `json:"create_time"`

	// The delete timestamp of the branch.
	// Required: true
	// Format: date-time
	DeleteTime *strfmt.DateTime `json:"delete_time"`

	// The display name of the branch.
	// Required: true
	DisplayName *string `json:"display_name"`

	// The endpoint of the branch.
	// Required: true
	Endpoints *OpenapiEndpoints `json:"endpoints"`

	// The ID of the branch.
	// Required: true
	ID *string `json:"id"`

	// The name of the branch.
	// Required: true
	Name *string `json:"name"`

	// The ID of the parent branch.
	// Required: true
	ParentID *string `json:"parent_id"`

	// The status of the branch.
	// Required: true
	State *OpenapiBranchState `json:"state"`

	// The update timestamp of the branch.
	// Required: true
	// Format: date-time
	UpdateTime *strfmt.DateTime `json:"update_time"`

	// The usages of the branch.
	// Required: true
	Usages *OpenapiUsages `json:"usages"`

	// The userPrefix of the branch.
	// Required: true
	UserPrefix *string `json:"user_prefix"`
}

// Validate validates this openapi branch
func (m *OpenapiBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnnotations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiBranch) validateAnnotations(formats strfmt.Registry) error {

	if err := validate.Required("annotations", "body", m.Annotations); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBranch) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBranch) validateCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("create_time", "body", m.CreateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("create_time", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBranch) validateDeleteTime(formats strfmt.Registry) error {

	if err := validate.Required("delete_time", "body", m.DeleteTime); err != nil {
		return err
	}

	if err := validate.FormatOf("delete_time", "body", "date-time", m.DeleteTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBranch) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBranch) validateEndpoints(formats strfmt.Registry) error {

	if err := validate.Required("endpoints", "body", m.Endpoints); err != nil {
		return err
	}

	if m.Endpoints != nil {
		if err := m.Endpoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endpoints")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiBranch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBranch) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBranch) validateParentID(formats strfmt.Registry) error {

	if err := validate.Required("parent_id", "body", m.ParentID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBranch) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiBranch) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("update_time", "body", m.UpdateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiBranch) validateUsages(formats strfmt.Registry) error {

	if err := validate.Required("usages", "body", m.Usages); err != nil {
		return err
	}

	if m.Usages != nil {
		if err := m.Usages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usages")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usages")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiBranch) validateUserPrefix(formats strfmt.Registry) error {

	if err := validate.Required("user_prefix", "body", m.UserPrefix); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openapi branch based on the context it is used
func (m *OpenapiBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiBranch) contextValidateEndpoints(ctx context.Context, formats strfmt.Registry) error {

	if m.Endpoints != nil {

		if err := m.Endpoints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endpoints")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiBranch) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiBranch) contextValidateUsages(ctx context.Context, formats strfmt.Registry) error {

	if m.Usages != nil {

		if err := m.Usages.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usages")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usages")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiBranch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiBranch) UnmarshalBinary(b []byte) error {
	var res OpenapiBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
