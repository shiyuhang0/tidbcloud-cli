// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterState Cluster State
//
// - STATE_UNSPECIFIED: The state of the cluster is unknown.
//   - CREATING: The cluster is being created.
//   - DELETING: The cluster is being deleted.
//   - ACTIVE: The cluster is active and running.
//   - RESTORING: The cluster is being restored.
//   - MAINTENANCE: The cluster is under maintenance.
//   - DELETED: The cluster is deleted.
//
// swagger:model ClusterState
type ClusterState string

func NewClusterState(value ClusterState) *ClusterState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterState.
func (m ClusterState) Pointer() *ClusterState {
	return &m
}

const (

	// ClusterStateSTATEUNSPECIFIED captures enum value "STATE_UNSPECIFIED"
	ClusterStateSTATEUNSPECIFIED ClusterState = "STATE_UNSPECIFIED"

	// ClusterStateCREATING captures enum value "CREATING"
	ClusterStateCREATING ClusterState = "CREATING"

	// ClusterStateDELETING captures enum value "DELETING"
	ClusterStateDELETING ClusterState = "DELETING"

	// ClusterStateACTIVE captures enum value "ACTIVE"
	ClusterStateACTIVE ClusterState = "ACTIVE"

	// ClusterStateRESTORING captures enum value "RESTORING"
	ClusterStateRESTORING ClusterState = "RESTORING"

	// ClusterStateMAINTENANCE captures enum value "MAINTENANCE"
	ClusterStateMAINTENANCE ClusterState = "MAINTENANCE"

	// ClusterStateDELETED captures enum value "DELETED"
	ClusterStateDELETED ClusterState = "DELETED"
)

// for schema
var clusterStateEnum []interface{}

func init() {
	var res []ClusterState
	if err := json.Unmarshal([]byte(`["STATE_UNSPECIFIED","CREATING","DELETING","ACTIVE","RESTORING","MAINTENANCE","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterStateEnum = append(clusterStateEnum, v)
	}
}

func (m ClusterState) validateClusterStateEnum(path, location string, value ClusterState) error {
	if err := validate.EnumCase(path, location, value, clusterStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster state
func (m ClusterState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster state based on context it is used
func (m ClusterState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
