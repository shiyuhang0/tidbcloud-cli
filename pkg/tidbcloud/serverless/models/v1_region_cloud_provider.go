// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1RegionCloudProvider Enum for cloud providers for the region.
//
//   - CLOUD_PROVIDER_UNSPECIFIED: Unspecified cloud provider.
//   - AWS: Amazon Web Services.
//   - GCP: Google Cloud Platform.
//
// swagger:model v1RegionCloudProvider
type V1RegionCloudProvider string

func NewV1RegionCloudProvider(value V1RegionCloudProvider) *V1RegionCloudProvider {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1RegionCloudProvider.
func (m V1RegionCloudProvider) Pointer() *V1RegionCloudProvider {
	return &m
}

const (

	// V1RegionCloudProviderCLOUDPROVIDERUNSPECIFIED captures enum value "CLOUD_PROVIDER_UNSPECIFIED"
	V1RegionCloudProviderCLOUDPROVIDERUNSPECIFIED V1RegionCloudProvider = "CLOUD_PROVIDER_UNSPECIFIED"

	// V1RegionCloudProviderAWS captures enum value "AWS"
	V1RegionCloudProviderAWS V1RegionCloudProvider = "AWS"

	// V1RegionCloudProviderGCP captures enum value "GCP"
	V1RegionCloudProviderGCP V1RegionCloudProvider = "GCP"
)

// for schema
var v1RegionCloudProviderEnum []interface{}

func init() {
	var res []V1RegionCloudProvider
	if err := json.Unmarshal([]byte(`["CLOUD_PROVIDER_UNSPECIFIED","AWS","GCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1RegionCloudProviderEnum = append(v1RegionCloudProviderEnum, v)
	}
}

func (m V1RegionCloudProvider) validateV1RegionCloudProviderEnum(path, location string, value V1RegionCloudProvider) error {
	if err := validate.EnumCase(path, location, value, v1RegionCloudProviderEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 region cloud provider
func (m V1RegionCloudProvider) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1RegionCloudProviderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 region cloud provider based on context it is used
func (m V1RegionCloudProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
