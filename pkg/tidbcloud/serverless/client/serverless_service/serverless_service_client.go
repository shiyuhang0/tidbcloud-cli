// Code generated by go-swagger; DO NOT EDIT.

package serverless_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new serverless service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for serverless service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ServerlessServiceChangeRootPassword(params *ServerlessServiceChangeRootPasswordParams, opts ...ClientOption) (*ServerlessServiceChangeRootPasswordOK, error)

	ServerlessServiceCreateCluster(params *ServerlessServiceCreateClusterParams, opts ...ClientOption) (*ServerlessServiceCreateClusterOK, error)

	ServerlessServiceDeleteCluster(params *ServerlessServiceDeleteClusterParams, opts ...ClientOption) (*ServerlessServiceDeleteClusterOK, error)

	ServerlessServiceGetCluster(params *ServerlessServiceGetClusterParams, opts ...ClientOption) (*ServerlessServiceGetClusterOK, error)

	ServerlessServiceListClusters(params *ServerlessServiceListClustersParams, opts ...ClientOption) (*ServerlessServiceListClustersOK, error)

	ServerlessServiceListRegions(params *ServerlessServiceListRegionsParams, opts ...ClientOption) (*ServerlessServiceListRegionsOK, error)

	ServerlessServicePartialUpdateCluster(params *ServerlessServicePartialUpdateClusterParams, opts ...ClientOption) (*ServerlessServicePartialUpdateClusterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ServerlessServiceChangeRootPassword changes the root user password of a cluster
*/
func (a *Client) ServerlessServiceChangeRootPassword(params *ServerlessServiceChangeRootPasswordParams, opts ...ClientOption) (*ServerlessServiceChangeRootPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerlessServiceChangeRootPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServerlessService_ChangeRootPassword",
		Method:             "PUT",
		PathPattern:        "/v1/clusters/{clusterId}/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServerlessServiceChangeRootPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerlessServiceChangeRootPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerlessServiceChangeRootPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServerlessServiceCreateCluster creates a serverless cluster note that user can specify the project ID to which the new cluster belongs if user do not specify the project ID the new cluster will be created in the project with earliest creation time
*/
func (a *Client) ServerlessServiceCreateCluster(params *ServerlessServiceCreateClusterParams, opts ...ClientOption) (*ServerlessServiceCreateClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerlessServiceCreateClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServerlessService_CreateCluster",
		Method:             "POST",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServerlessServiceCreateClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerlessServiceCreateClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerlessServiceCreateClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServerlessServiceDeleteCluster deletes a cluster
*/
func (a *Client) ServerlessServiceDeleteCluster(params *ServerlessServiceDeleteClusterParams, opts ...ClientOption) (*ServerlessServiceDeleteClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerlessServiceDeleteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServerlessService_DeleteCluster",
		Method:             "DELETE",
		PathPattern:        "/v1/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServerlessServiceDeleteClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerlessServiceDeleteClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerlessServiceDeleteClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServerlessServiceGetCluster gets information about a cluster
*/
func (a *Client) ServerlessServiceGetCluster(params *ServerlessServiceGetClusterParams, opts ...ClientOption) (*ServerlessServiceGetClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerlessServiceGetClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServerlessService_GetCluster",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServerlessServiceGetClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerlessServiceGetClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerlessServiceGetClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServerlessServiceListClusters lists information about clusters note that list clusters action will only return basic information for each cluster if user needs detailed information suggest to use get cluster
*/
func (a *Client) ServerlessServiceListClusters(params *ServerlessServiceListClustersParams, opts ...ClientOption) (*ServerlessServiceListClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerlessServiceListClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServerlessService_ListClusters",
		Method:             "GET",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServerlessServiceListClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerlessServiceListClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerlessServiceListClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServerlessServiceListRegions lists information about the supported regions for this service
*/
func (a *Client) ServerlessServiceListRegions(params *ServerlessServiceListRegionsParams, opts ...ClientOption) (*ServerlessServiceListRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerlessServiceListRegionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServerlessService_ListRegions",
		Method:             "GET",
		PathPattern:        "/v1/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServerlessServiceListRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerlessServiceListRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerlessServiceListRegionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ServerlessServicePartialUpdateCluster partiallies updates a cluster this method can modify all root fields of a cluster note that updating multiple fields in a single API call is not permitted
*/
func (a *Client) ServerlessServicePartialUpdateCluster(params *ServerlessServicePartialUpdateClusterParams, opts ...ClientOption) (*ServerlessServicePartialUpdateClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerlessServicePartialUpdateClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServerlessService_PartialUpdateCluster",
		Method:             "PATCH",
		PathPattern:        "/v1/clusters/{cluster.clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServerlessServicePartialUpdateClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerlessServicePartialUpdateClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ServerlessServicePartialUpdateClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
