// Code generated by go-swagger; DO NOT EDIT.

package serverless_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewServerlessServiceListClustersParams creates a new ServerlessServiceListClustersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewServerlessServiceListClustersParams() *ServerlessServiceListClustersParams {
	return &ServerlessServiceListClustersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewServerlessServiceListClustersParamsWithTimeout creates a new ServerlessServiceListClustersParams object
// with the ability to set a timeout on a request.
func NewServerlessServiceListClustersParamsWithTimeout(timeout time.Duration) *ServerlessServiceListClustersParams {
	return &ServerlessServiceListClustersParams{
		timeout: timeout,
	}
}

// NewServerlessServiceListClustersParamsWithContext creates a new ServerlessServiceListClustersParams object
// with the ability to set a context for a request.
func NewServerlessServiceListClustersParamsWithContext(ctx context.Context) *ServerlessServiceListClustersParams {
	return &ServerlessServiceListClustersParams{
		Context: ctx,
	}
}

// NewServerlessServiceListClustersParamsWithHTTPClient creates a new ServerlessServiceListClustersParams object
// with the ability to set a custom HTTPClient for a request.
func NewServerlessServiceListClustersParamsWithHTTPClient(client *http.Client) *ServerlessServiceListClustersParams {
	return &ServerlessServiceListClustersParams{
		HTTPClient: client,
	}
}

/*
ServerlessServiceListClustersParams contains all the parameters to send to the API endpoint

	for the serverless service list clusters operation.

	Typically these are written to a http.Request.
*/
type ServerlessServiceListClustersParams struct {

	/* Filter.

	   Optional. Filtering results
	*/
	Filter *string

	/* PageSize.

	     Optional. Requested page size. Server may return fewer items than
	requested. If unspecified, server will pick an appropriate default.

	     Format: int32
	*/
	PageSize *int32

	/* PageToken.

	   A token identifying a page of results the server should return.
	*/
	PageToken *string

	/* ProjectID.

	   Optional. The ID of the project to which the clusters belong.

	   Format: uint64
	*/
	ProjectID *string

	/* Skip.

	   Optional. Skip results

	   Format: int32
	*/
	Skip *int32

	/* View.

	     Optional. The view of the cluster to return. ListClusters action will
	only return basic information for each cluster.

	 - CLUSTER_VIEW_UNSPECIFIED: CLUSTER_VIEW_UNSPECIFIED Not specified, equivalent to BASIC.
	 - BASIC: Server responses for ListCluster and Delete Cluster actions.
	 - FULL: FULL response contains all detailed information for a Cluster.

	     Default: "CLUSTER_VIEW_UNSPECIFIED"
	*/
	View *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the serverless service list clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServerlessServiceListClustersParams) WithDefaults() *ServerlessServiceListClustersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the serverless service list clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServerlessServiceListClustersParams) SetDefaults() {
	var (
		viewDefault = string("CLUSTER_VIEW_UNSPECIFIED")
	)

	val := ServerlessServiceListClustersParams{
		View: &viewDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithTimeout(timeout time.Duration) *ServerlessServiceListClustersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithContext(ctx context.Context) *ServerlessServiceListClustersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithHTTPClient(client *http.Client) *ServerlessServiceListClustersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithFilter(filter *string) *ServerlessServiceListClustersParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithPageSize adds the pageSize to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithPageSize(pageSize *int32) *ServerlessServiceListClustersParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithPageToken(pageToken *string) *ServerlessServiceListClustersParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithProjectID adds the projectID to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithProjectID(projectID *string) *ServerlessServiceListClustersParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithSkip adds the skip to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithSkip(skip *int32) *ServerlessServiceListClustersParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithView adds the view to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithView(view *string) *ServerlessServiceListClustersParams {
	o.SetView(view)
	return o
}

// SetView adds the view to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetView(view *string) {
	o.View = view
}

// WriteToRequest writes these params to a swagger request
func (o *ServerlessServiceListClustersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param pageToken
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("pageToken", qPageToken); err != nil {
				return err
			}
		}
	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string

		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {

			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.View != nil {

		// query param view
		var qrView string

		if o.View != nil {
			qrView = *o.View
		}
		qView := qrView
		if qView != "" {

			if err := r.SetQueryParam("view", qView); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
